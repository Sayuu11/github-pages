if game.PlaceId == 103289721276360 then
	local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

	local Window = Rayfield:CreateWindow({
   Name = "Sayuu HUBüêá",
   Icon = 0, 
   LoadingTitle = "Welcome to Sayuu HUBü•∂",
   LoadingSubtitle = "by Sayuu",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = "Sayuu", -- Create a custom folder for your hub/game
      FileName = "Sayuu Hub"
   },

   Discord = {
      Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "https://discord.gg/ySq94JsXn3", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Sayuu Hub | Key",
      Subtitle = "Link in Discord Server",
      Note = "Join Discord Server from Misc Tab.", -- Use this to tell the user how to get a key
      FileName = "SayuuHubKey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://pastebin.com/raw/rQ8u2ywr"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

-- Main Tab

local MainTab = Window:CreateTab("üè†Home", nil)
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "You executed Sayuu Hub!",
   Content = "Nice broüß†",
   Duration = 6.5,
   Image = nil,
})

local InfiniteJumpToggle = MainTab:CreateToggle({
   Name = "Infinite Jump",
   CurrentValue = 32,
   Flag = "Infinite Jump", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)

_G.infinjump = not _G.infinjump

   if _G.infinJumpStarted == nil then
	   _G.infinJumpStarted = true

   ---notifi
   game.StarterGui:SetCore("SendNotification", {Title="Sayuu Hub"; Text="Infinite Jump Activated!"; Duration=5;})

   --code
   local plr = game:GetService("Players").LocalPlayer
   local m = plr:GetMouse()
   m.KeyDown:Connect(function(k)
       if _G.infinjump then
		  if k:byte() == 32 then
			  humanoid = game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
			  humanoid:ChangeState("Jumping")
			  wait()
			  humanoid:ChangeState("Seated")
		  end 
	   end
   end)
end  
   end,
})

local Players = game:GetService("Players")
local Debris = game:GetService("Debris")

local isHakiEnabled = false -- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Haki

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Damage Part
local function createDamagePart(player)
    if not isHakiEnabled then
        return -- ‡∏ñ‡πâ‡∏≤ Haki ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á Damage Part
    end

    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á Part
    local damagePart = Instance.new("Part")
    damagePart.Size = Vector3.new(20, 20, 20) -- ‡∏Ç‡∏ô‡∏≤‡∏î Part
    damagePart.Anchored = true
    damagePart.CanCollide = false -- ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏ô‡πÑ‡∏î‡πâ
    damagePart.Material = Enum.Material.ForceField -- ‡πÉ‡∏ä‡πâ Material ‡πÄ‡∏õ‡πá‡∏ô ForceField
    damagePart.Transparency = 0.3 -- ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    damagePart.Color = Color3.fromRGB(0, 255, 255) -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡πâ‡∏≤ (‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)

    -- ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Part
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        -- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ Damage Part ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
        damagePart.Position = character.HumanoidRootPart.Position + Vector3.new(0, -3, 0) -- ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    else
        warn("Player character not found.")
        return
    end

    -- ‡πÄ‡∏û‡∏¥‡πà‡∏° Attribute ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
    damagePart:SetAttribute("Owner", player.UserId)

    -- ‡πÄ‡∏û‡∏¥‡πà‡∏° Part ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Workspace
    damagePart.Parent = workspace

    -- ‡πÉ‡∏™‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô Part
    local sound = Instance.new("Sound")
    sound.SoundId = "rbxassetid://857104011" -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Sound ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    sound.Volume = 1
    sound.Parent = damagePart

    -- ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Part
    sound:Play()

    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏≤‡πÄ‡∏°‡∏à
    damagePart.Touched:Connect(function(hit)
        local otherCharacter = hit.Parent
        local otherPlayer = Players:GetPlayerFromCharacter(otherCharacter)

        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô
        if otherPlayer and otherPlayer.UserId ~= player.UserId then
            local humanoid = otherCharacter:FindFirstChild("Humanoid")
            if humanoid then
                humanoid:TakeDamage(50) -- ‡∏î‡∏≤‡πÄ‡∏°‡∏à 50 ‡∏´‡∏ô‡πà‡∏ß‡∏¢
                print(otherPlayer.Name .. " received damage from " .. player.Name)
            end
        end
    end)

    -- ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ Part ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    Debris:AddItem(damagePart, 17)
end

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á Toggle ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Conqueror Haki
local HakiToggle = MainTab:CreateToggle({
    Name = "Conqueror Haki",
    CurrentValue = false, -- ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Toggle ‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏¥‡∏î
    Flag = "Haki", -- Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    Callback = function(Value)
        isHakiEnabled = Value -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Haki
        if isHakiEnabled then
            print("Conqueror Haki ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        else
            print("Conqueror Haki ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        end

        -- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î Haki ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Damage Part ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î Haki
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Character and isHakiEnabled then
                createDamagePart(player) -- ‡∏™‡∏£‡πâ‡∏≤‡∏á Damage Part ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î Haki
            end
        end
    end,
})

-- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡πÄ‡∏Å‡∏°
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        -- ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà
        task.wait(2)
        if isHakiEnabled and player.Name == "mmxr11in" then
            createDamagePart(player) -- ‡∏™‡∏£‡πâ‡∏≤‡∏á Damage Part ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î Haki
			else
				print("This guys didn't have conq haki")
        end
    end)
end)


local Slider = MainTab:CreateSlider({
   Name = "Walkspeed Slider",
   Range = {0, 300},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local ReplicatedCheckerSection = MainTab:CreateSection("üîéReplicated Storage Checker")

-- Function to get items from ReplicatedStorage
local function listItemsInReplicatedStorage()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local items = {}

    -- Iterate through all items in ReplicatedStorage
    for _, item in ipairs(ReplicatedStorage:GetChildren()) do
        table.insert(items, item.Name)
    end

    return items
end

-- Dropdown to select items from ReplicatedStorage
local ReplicatedStorageCheckerDropdown = MainTab:CreateDropdown({
    Name = "Select Items",
    Options = listItemsInReplicatedStorage(), -- Load items dynamically from ReplicatedStorage
    CurrentOption = "None",
    MultipleOptions = false,
    Callback = function(selectedItem)
        print("Selected Item:", selectedItem)
        -- Here, you can do other actions when an item is selected, if needed
    end,
})

-- Update Dropdown dynamically when ReplicatedStorage changes
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Listen for changes in ReplicatedStorage
ReplicatedStorage.ChildAdded:Connect(function()
    ReplicatedStorageCheckerDropdown:SetOptions(listItemsInReplicatedStorage()) -- Update options when a new item is added
end)

ReplicatedStorage.ChildRemoved:Connect(function()
    ReplicatedStorageCheckerDropdown:SetOptions(listItemsInReplicatedStorage()) -- Update options when an item is removed
end)


-- Teleport Tab

local TeleportTab = Window:CreateTab("üååTeleports", nil)
local TeleportSection = TeleportTab:CreateSection("Places")

local Dropdown = TeleportTab:CreateDropdown({
   Name = "Select Area",
   Options = {"Option 1","Option 2"},
   CurrentOption = {"Option 1"},
   MultipleOptions = false,
   Flag = "Teleport", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
		print(Options)
   end,
})

-- Misc Tab

local MiscTab = Window:CreateTab("üé≤Misc", nil)
local MiscSection = MiscTab:CreateSection("Settings")

end
